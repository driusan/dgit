package git

import (
	"bytes"
	"io"
	"io/ioutil"
	"testing"
)

func BenchmarkIndexPackFromFile(b *testing.B) {
	// A random small pack file, the same as one from TestUnpackObjects.
	// OFS_DELTA chain with a length of 2. It's not a very realistic
	// benchmark, but it's better than storing a large amount of test
	// data in git to be able to test sometihng more realistic.
	data := []byte{0x50, 0x41, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0xbc, 0x08, 0x78, 0x9c,
		0x73, 0xe4, 0x72, 0xc4, 0x09, 0x9d, 0xb8, 0x9c, 0xb9, 0x5c, 0xb8, 0x5c, 0xe9, 0x46, 0x03, 0x00,
		0xcc, 0xc9, 0x15, 0x0f, 0x65, 0x18, 0x78, 0x9c, 0xeb, 0x61, 0x2c, 0x9a, 0x50, 0x04, 0x00, 0x05,
		0xad, 0x02, 0x02, 0x65, 0x0f, 0x78, 0x9c, 0x2b, 0x4a, 0x9a, 0x28, 0x90, 0x04, 0x00, 0x05, 0xfc,
		0x01, 0xd8, 0x75, 0xcc, 0x90, 0x92, 0xc3, 0xd9, 0x93, 0xba, 0xcf, 0xe4, 0x1d, 0x7c, 0xed, 0x5d,
		0x8f, 0x46, 0xdf, 0xc2, 0x19, 0x0f,
	}
	c, err := Init(nil, InitOptions{}, "/tmp/indexpackbench")
	if err != nil {
		panic(err)
	}
	f, err := ioutil.TempFile("", "foo*.pack")
	if err != nil {
		panic(err)
	}
	buf := bytes.NewBuffer(data)
	if _, err := io.Copy(f, buf); err != nil {
		panic(err)
	}
	for n := 0; n < b.N; n++ {
		if _, err := f.Seek(0, io.SeekStart); err != nil {
			panic(err)
		}
		if _, err := IndexAndCopyPack(c, IndexPackOptions{}, f); err != nil {
			panic(err)
		}
	}
}

func BenchmarkIndexPackFromReader(b *testing.B) {
	// A random small pack file, the same as one from TestUnpackObjects.
	// OFS_DELTA chain with a length of 2. It's not a very realistic
	// benchmark, but it's better than storing a large amount of test
	// data in git to be able to test sometihng more realistic.
	data := []byte{0x50, 0x41, 0x43, 0x4b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0xbc, 0x08, 0x78, 0x9c,
		0x73, 0xe4, 0x72, 0xc4, 0x09, 0x9d, 0xb8, 0x9c, 0xb9, 0x5c, 0xb8, 0x5c, 0xe9, 0x46, 0x03, 0x00,
		0xcc, 0xc9, 0x15, 0x0f, 0x65, 0x18, 0x78, 0x9c, 0xeb, 0x61, 0x2c, 0x9a, 0x50, 0x04, 0x00, 0x05,
		0xad, 0x02, 0x02, 0x65, 0x0f, 0x78, 0x9c, 0x2b, 0x4a, 0x9a, 0x28, 0x90, 0x04, 0x00, 0x05, 0xfc,
		0x01, 0xd8, 0x75, 0xcc, 0x90, 0x92, 0xc3, 0xd9, 0x93, 0xba, 0xcf, 0xe4, 0x1d, 0x7c, 0xed, 0x5d,
		0x8f, 0x46, 0xdf, 0xc2, 0x19, 0x0f,
	}
	c, err := Init(nil, InitOptions{}, "/tmp/indexpackbench")
	if err != nil {
		panic(err)
	}
	for n := 0; n < b.N; n++ {
		buf := bytes.NewBuffer(data)
		if _, err := IndexAndCopyPack(c, IndexPackOptions{}, buf); err != nil {
			panic(err)
		}
	}
}
